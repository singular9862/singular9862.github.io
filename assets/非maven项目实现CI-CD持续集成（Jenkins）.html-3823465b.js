const e=JSON.parse('{"key":"v-3b7c7318","path":"/middleware/devops/autodeploy/%E9%9D%9Emaven%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0CI-CD%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%88Jenkins%EF%BC%89.html","title":"非maven项目实现CI/CD持续集成（Jenkins）","lang":"zh-CN","frontmatter":{"title":"非maven项目实现CI/CD持续集成（Jenkins）","icon":"edit","order":1,"date":"2023-03-01T00:00:00.000Z","author":"singularity","category":["持续集成"],"star":8,"isOriginal":true,"tag":["CI/CD","jenkins","非maven"],"copyright":"singularity原创,未经作者同意谢绝转载","description":"写在前面： 本文是对公司项目做的一次自动化实战。公司架构分新旧两版，本文是对旧版本的一次实战。且由于maven仓库需内网环境的原因，选择非maven项目进行实战。 笔者在测试完成后已在个人服务器将所有源码移除，且本文未展示任何源码信息。 1.CI/CD 1.1 何为CI/CD 根据互联网上绝大多数的说法，CI/CD其实是三个概念，包括了一个CI和两个CD。分别是 Continuous Integration（持续集成）， Continuous Delivery（持续交付）和 Continuous Deployment（持续部署）。 简言之，CI/CD旨在打通软件开发与交付部署的链路，使各个环节形成通路，持续提高开发效率与代码品质。","head":[["meta",{"property":"og:url","content":"https://singular9862.github.io/middleware/devops/autodeploy/%E9%9D%9Emaven%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0CI-CD%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%88Jenkins%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"singularity"}],["meta",{"property":"og:title","content":"非maven项目实现CI/CD持续集成（Jenkins）"}],["meta",{"property":"og:description","content":"写在前面： 本文是对公司项目做的一次自动化实战。公司架构分新旧两版，本文是对旧版本的一次实战。且由于maven仓库需内网环境的原因，选择非maven项目进行实战。 笔者在测试完成后已在个人服务器将所有源码移除，且本文未展示任何源码信息。 1.CI/CD 1.1 何为CI/CD 根据互联网上绝大多数的说法，CI/CD其实是三个概念，包括了一个CI和两个CD。分别是 Continuous Integration（持续集成）， Continuous Delivery（持续交付）和 Continuous Deployment（持续部署）。 简言之，CI/CD旨在打通软件开发与交付部署的链路，使各个环节形成通路，持续提高开发效率与代码品质。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"singularity"}],["meta",{"property":"article:tag","content":"CI/CD"}],["meta",{"property":"article:tag","content":"jenkins"}],["meta",{"property":"article:tag","content":"非maven"}],["meta",{"property":"article:published_time","content":"2023-03-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"非maven项目实现CI/CD持续集成（Jenkins）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"singularity\\"}]}"]]},"headers":[{"level":2,"title":"1.CI/CD","slug":"_1-ci-cd","link":"#_1-ci-cd","children":[{"level":3,"title":"1.1 何为CI/CD","slug":"_1-1-何为ci-cd","link":"#_1-1-何为ci-cd","children":[]},{"level":3,"title":"1.2 为何CI/CD","slug":"_1-2-为何ci-cd","link":"#_1-2-为何ci-cd","children":[]},{"level":3,"title":"1.3实战CI/CD","slug":"_1-3实战ci-cd","link":"#_1-3实战ci-cd","children":[]}]},{"level":2,"title":"2.SVN触发Jenkins自动构建","slug":"_2-svn触发jenkins自动构建","link":"#_2-svn触发jenkins自动构建","children":[{"level":3,"title":"1.前置说明","slug":"_1-前置说明","link":"#_1-前置说明","children":[]},{"level":3,"title":"2.实操步骤","slug":"_2-实操步骤","link":"#_2-实操步骤","children":[]}]},{"level":2,"title":"3.后续展望","slug":"_3-后续展望","link":"#_3-后续展望","children":[]}],"git":{},"readingTime":{"minutes":8.73,"words":2620},"filePathRelative":"middleware/devops/autodeploy/非maven项目实现CI-CD持续集成（Jenkins）.md","localizedDate":"2023年3月1日","excerpt":"<hr>\\n<h4> 写在前面：</h4>\\n<pre><code>本文是对公司项目做的一次自动化实战。公司架构分新旧两版，本文是对旧版本的一次实战。且由于maven仓库需内网环境的原因，选择非maven项目进行实战。\\n笔者在测试完成后已在个人服务器将所有源码移除，且本文未展示任何源码信息。\\n</code></pre>\\n<h2> <a href=\\"http://1.CI/CD\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">1.CI/CD</a></h2>\\n<h3> 1.1 何为CI/CD</h3>\\n<pre><code>   根据互联网上绝大多数的说法，CI/CD其实是三个概念，包括了一个CI和两个CD。分别是 Continuous Integration（持续集成）， Continuous Delivery（持续交付）和 Continuous Deployment（持续部署）。\\n   简言之，CI/CD旨在打通软件开发与交付部署的链路，使各个环节形成通路，持续提高开发效率与代码品质。\\n</code></pre>","autoDesc":true}');export{e as data};
