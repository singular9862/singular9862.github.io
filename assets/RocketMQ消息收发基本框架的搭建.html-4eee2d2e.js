const e=JSON.parse('{"key":"v-e7742b20","path":"/middleware/message/rocketmq/RocketMQ%E6%B6%88%E6%81%AF%E6%94%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA.html","title":"RocketMQ消息收发基本框架的搭建","lang":"zh-CN","frontmatter":{"title":"RocketMQ消息收发基本框架的搭建","icon":"edit","order":1,"date":"2023-03-01T00:00:00.000Z","author":"singularity","category":["中间件"],"star":8,"isOriginal":true,"tag":["消息中间件","rocketMQ"],"copyright":"singularity原创,未经作者同意谢绝转载","description":"RocketMQ消息中间件    RocketMQ是消息中间件之一，要谈什么是RocketMQ，就需要先明确什么是消息中间件，消息中间件的存在是为了解决什么样的问题？    同样无需照本宣科，消息中间件就是在同一程序或不同程序间进行同步或者异步消息传递的第三方组建。那么消息中间件解决了什么样的问题，亦或者应用场景是什么？最出名的就是处理高并发场景下的流量削峰平谷。    举一个比较浅显的例子，大批量订单打入系统，系统是需要对应生成物流信息的，但是如果这两件事放到一起做，就会在同一时间内占用很多资源去做物流信息生成这件事，但这件事本身对于订单来说是无关紧要的。因此就可以通过消息中间件，订单成功生成后，向消息中间件发送消息，告知订单生成成功，需生成物流信息，这样，生成订单的线程就可以直接结束掉。至于物流信息，则是根据相应的监听策略，监听到消息再写入，延时消费，批量消费，都可以起到资源合理分配的作用。","head":[["meta",{"property":"og:url","content":"https://singular9862.github.io/middleware/message/rocketmq/RocketMQ%E6%B6%88%E6%81%AF%E6%94%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA.html"}],["meta",{"property":"og:site_name","content":"singularity"}],["meta",{"property":"og:title","content":"RocketMQ消息收发基本框架的搭建"}],["meta",{"property":"og:description","content":"RocketMQ消息中间件    RocketMQ是消息中间件之一，要谈什么是RocketMQ，就需要先明确什么是消息中间件，消息中间件的存在是为了解决什么样的问题？    同样无需照本宣科，消息中间件就是在同一程序或不同程序间进行同步或者异步消息传递的第三方组建。那么消息中间件解决了什么样的问题，亦或者应用场景是什么？最出名的就是处理高并发场景下的流量削峰平谷。    举一个比较浅显的例子，大批量订单打入系统，系统是需要对应生成物流信息的，但是如果这两件事放到一起做，就会在同一时间内占用很多资源去做物流信息生成这件事，但这件事本身对于订单来说是无关紧要的。因此就可以通过消息中间件，订单成功生成后，向消息中间件发送消息，告知订单生成成功，需生成物流信息，这样，生成订单的线程就可以直接结束掉。至于物流信息，则是根据相应的监听策略，监听到消息再写入，延时消费，批量消费，都可以起到资源合理分配的作用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"singularity"}],["meta",{"property":"article:tag","content":"消息中间件"}],["meta",{"property":"article:tag","content":"rocketMQ"}],["meta",{"property":"article:published_time","content":"2023-03-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ消息收发基本框架的搭建\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"singularity\\"}]}"]]},"headers":[{"level":2,"title":"RocketMQ消息中间件","slug":"rocketmq消息中间件","link":"#rocketmq消息中间件","children":[{"level":3,"title":"RocketMQ基本消息发送接收","slug":"rocketmq基本消息发送接收","link":"#rocketmq基本消息发送接收","children":[]},{"level":3,"title":"简易收发框架代码","slug":"简易收发框架代码","link":"#简易收发框架代码","children":[]},{"level":3,"title":"测试使用","slug":"测试使用","link":"#测试使用","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]}],"git":{},"readingTime":{"minutes":6.98,"words":2093},"filePathRelative":"middleware/message/rocketmq/RocketMQ消息收发基本框架的搭建.md","localizedDate":"2023年3月1日","excerpt":"<hr>\\n<h2> RocketMQ消息中间件</h2>\\n<p>   RocketMQ是消息中间件之一，要谈什么是RocketMQ，就需要先明确什么是消息中间件，消息中间件的存在是为了解决什么样的问题？</p>\\n<p>   同样无需照本宣科，消息中间件就是在同一程序或不同程序间进行同步或者异步消息传递的第三方组建。那么消息中间件解决了什么样的问题，亦或者应用场景是什么？最出名的就是处理高并发场景下的流量削峰平谷。</p>\\n<p>   举一个比较浅显的例子，大批量订单打入系统，系统是需要对应生成物流信息的，但是如果这两件事放到一起做，就会在同一时间内占用很多资源去做物流信息生成这件事，但这件事本身对于订单来说是无关紧要的。因此就可以通过消息中间件，订单成功生成后，向消息中间件发送消息，告知订单生成成功，需生成物流信息，这样，生成订单的线程就可以直接结束掉。至于物流信息，则是根据相应的监听策略，监听到消息再写入，延时消费，批量消费，都可以起到资源合理分配的作用。</p>","autoDesc":true}');export{e as data};
