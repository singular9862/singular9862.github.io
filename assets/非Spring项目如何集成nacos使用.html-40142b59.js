import{_ as a,X as s,Y as n,a0 as e}from"./framework-1e27cadd.js";const t="/assets/b8e9f14da7304c7b917002eb98ea9a6b-6d575c2a.png",p="/assets/00fbb38108b64bb985508a57e747f885-fcf5161b.png",l="/assets/df11cc20f1f849fe9ff56cdc57799b34-a64192e1.png",i="/assets/d5ff932ed8df4b0883d56394a2251f7c-ee5b421e.png",o="/assets/b51258978481468cb6850f7a8eb5b63c-a39bc806.png",c="/assets/ed7a9624eba043f083cb04775513b0de-dc62cfdf.png",r="/assets/c410199591ab4be095188503b617d98b-7e9f173f.png",d="/assets/df5c7385112c4cedbba8f56256d611b4-b67a0a05.png",v="/assets/0b90b645a14d4a11964b8666faff5bab-c900726d.png",u="/assets/03a1ff0a70b14ba5b2275c3c648f1d46-73455610.png",m={},b=e('<hr><h2 id="非spring项目如何集成nacos使用" tabindex="-1"><a class="header-anchor" href="#非spring项目如何集成nacos使用" aria-hidden="true">#</a> 非Spring项目如何集成nacos使用</h2><hr><h3 id="_1-nacos是什么" tabindex="-1"><a class="header-anchor" href="#_1-nacos是什么" aria-hidden="true">#</a> 1.nacos是什么</h3><p>    根据nacos官方的介绍，nacos为Dynamic Naming and Configuration Service的首字母简称，是一个一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。     笔者个人对nacos的理解则是，spring cloud Alibaba解决方案下配置中心所使用的组件，主要是用来做服务注册与发现，配置管理。</p><h4 id="_2-nacos怎么用" tabindex="-1"><a class="header-anchor" href="#_2-nacos怎么用" aria-hidden="true">#</a> 2.nacos怎么用</h4><p>    nacos官方文档给出了nacos生态下与一些主流框架的集成方案。 <img src="'+t+'" alt="5b13d087a8b917c010afb25c8bbe7899.png" loading="lazy"><img src="'+p+'" alt="9c9c57424d25bf65e4bf65941d14c4e9.png" loading="lazy">     但从非主流框架下的JavaWeb应用（例如OSP3.0）角度来说，在实际开发情况下，亦需要多环境开发测试及上线，就会出现多套代码不同配置文件的情况。可能该情况现有使用较多的解决方案是代码版本管理，但这会带来另外的问题。</p><ul><li>首当其冲的便是效率问题，更改配置问题，上传代码库，应用重新部署，有几个环境就需要操作几次。当然，该问题也可以采用另一篇文章中提到的Jenkins自动触发的方式来进行优化。</li><li>其二则是不能对程序配置文件进行统一管理，各环境，各应用配置文件分散在各个代码包中，不易于检索，排查，更新。     因此在传统JavaWeb应用中使用配置中心也是有益无弊的举措。但相较于主流开发框架即拿即用的部署及集成来讲，传统web应用的集成存在一定的难度，因为并不存在服务注册与发现的过程，并不能直接拿到配置中心的相关配置进行使用。     但是在这里，笔者提出两个自己的解决方案，经实测都生效且有较好的效果。</li></ul><h4 id="_3-非spring项目集成nacos使用" tabindex="-1"><a class="header-anchor" href="#_3-非spring项目集成nacos使用" aria-hidden="true">#</a> 3.非Spring项目集成nacos使用</h4><h5 id="_3-1-方案一-调用官方提供接口拿到配置值" tabindex="-1"><a class="header-anchor" href="#_3-1-方案一-调用官方提供接口拿到配置值" aria-hidden="true">#</a> 3.1 方案一：调用官方提供接口拿到配置值</h5><p>nacos官方提供包含但不限于以下的几个接口：</p><ul><li>获取某个dataId的配置内容</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http../images//${ip}:${port}/nacos/v1/cs/configs?dataId=${dataId}&amp;group=${group}&amp;tenant=${tenant}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取多个dataId的配置内容</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http../images//${ip}:${port}/nacos/v1/cs/configs?dataId=${dataId1}&amp;group=${group}&amp;tenant=${tenant}&amp;dataId=${dataId2}&amp;group=${group}&amp;tenant=${tenant}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下载整个group的配置内容</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http../images//${ip}:${port}/nacos/v1/cs/configs?search=accurate&amp;dataId=&amp;group=${group}&amp;tenant=${tenant}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>下载某个namespace下所有的配置</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http../images//${ip}:${port}/nacos/v1/cs/configs?search=accurate&amp;dataId=&amp;group=&amp;tenant=${tenant}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>获取某个dataId的配置内容</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http../images//${ip}:${port}/nacos/v1/cs/configs?dataId=${dataId}&amp;group=${group}&amp;tenant=${tenant}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，dataId和group参数必须传递，tenant参数可选。 基本思路就是，通过上述接口拿到配置中心当前应用的配置项，再通过脚本语言进行解析，存放到相应的文件夹下面。最后将该脚本放到tomcat的启动脚本catalina.sh中，让程序在启动时就去获取，解析，存储。 笔者在nacos的配置如下 <img src="'+l+'" alt="6bb6f1addbc86b318c4fa77d951cbd7a.png" loading="lazy"> 并且已将应用中所有配置文件删除 <img src="'+i+`" alt="16d00d38dd90c0cdec2b178fbe79f668.png" loading="lazy"> 可以看到在目标目录Config和CnfgSpace下都已无配置文件。 shell脚本如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># set -e</span>
<span class="token comment"># set -x</span>
<span class="token comment"># TODO: 替换为 Nacos Server 的 IP 地址和端口号</span>
<span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span>
<span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">&quot;8848&quot;</span>

<span class="token comment"># TODO: 替换为要获取的配置所在的分组和租户名（如果没有可以不填）</span>
<span class="token assign-left variable">group</span><span class="token operator">=</span><span class="token string">&quot;local&quot;</span>

<span class="token comment"># TODO: 替换为每次请求获取的数据条数</span>
<span class="token assign-left variable">pageSize</span><span class="token operator">=</span><span class="token string">&quot;20&quot;</span>
<span class="token assign-left variable">pageNo</span><span class="token operator">=</span><span class="token string">&quot;1&quot;</span>


<span class="token comment"># TODO: 替换为需要获取的配置列表的dataId前缀（如果不需要限定前缀，设为 &quot;&quot;）</span>
<span class="token comment"># prefix=&quot;&quot;</span>

<span class="token assign-left variable">baseURL</span><span class="token operator">=</span><span class="token string">&quot;http../images//<span class="token variable">\${ip}</span>:<span class="token variable">\${port}</span>/nacos/v1/cs/configs?search=accurate&amp;dataId=<span class="token variable">\${prefix}</span>&amp;group=<span class="token variable">\${group}</span>&amp;pageSize=<span class="token variable">\${pageSize}</span>&amp;pageNo=<span class="token variable">\${pageNo}</span>&quot;</span>

<span class="token comment"># 发送 HTTP totalCount 和 pagesAvailable(总页数)</span>
<span class="token assign-left variable">totalCount</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> GET $<span class="token punctuation">{</span>baseURL<span class="token punctuation">}</span> <span class="token operator">|</span> jq  <span class="token parameter variable">-r</span> <span class="token string">&#39;.totalCount&#39;</span><span class="token variable">)</span></span>
<span class="token assign-left variable">pageNumber</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> GET $<span class="token punctuation">{</span>baseURL<span class="token punctuation">}</span> <span class="token operator">|</span> jq  <span class="token parameter variable">-r</span> <span class="token string">&#39;.pageNumber&#39;</span><span class="token variable">)</span></span>
<span class="token assign-left variable">pagesAvailable</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> GET $<span class="token punctuation">{</span>baseURL<span class="token punctuation">}</span> <span class="token operator">|</span> jq  <span class="token parameter variable">-r</span> <span class="token string">&#39;.pagesAvailable&#39;</span><span class="token variable">)</span></span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;总共有 <span class="token variable">$totalCount</span> 个配置，共 <span class="token variable">$pagesAvailable</span> 页&quot;</span>

<span class="token comment"># 遍历每一页，获取其中的配置并存储到对应的文件夹中</span>
<span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>pageNo<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> pageNo<span class="token operator">&lt;=</span>pagesAvailable<span class="token punctuation">;</span> pageNo<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;开始获取第 <span class="token variable">$pageNo</span> 页配置...&quot;</span>

  <span class="token comment"># 发送 HTTP 请求获取当前页的配置</span>
    <span class="token assign-left variable">pageItems</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span>  <span class="token parameter variable">-X</span> GET $<span class="token punctuation">{</span>baseURL<span class="token punctuation">}</span>   <span class="token operator">|</span> jq  <span class="token parameter variable">-r</span> <span class="token string">&#39;.pageItems&#39;</span> <span class="token variable">)</span></span>

  <span class="token comment"># 遍历当前页的每一个配置，将其内容写入对应的文件</span>


    <span class="token comment"># 定义变量，指定文件夹名称</span>
    <span class="token assign-left variable">folderA</span><span class="token operator">=</span><span class="token string">&quot;/Users/liuzhengdong/project/hrssc/project-svn/CNPC-SSC/ssf-application/ssfServerDev/WEB-INF/CnfgSpace&quot;</span>
    <span class="token assign-left variable">folderB</span><span class="token operator">=</span><span class="token string">&quot;/Users/liuzhengdong/project/hrssc/project-svn/CNPC-SSC/ssf-application/ssfServerDev/WEB-INF/classes/Config&quot;</span>

    <span class="token comment"># 解析json数组，遍历每一个item对象</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span> <span class="token builtin class-name">printf</span> <span class="token string">&quot;%s<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token string">&quot;<span class="token variable">\${pageItems}</span>&quot;</span>  <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">&#39; &#39;</span> <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token parameter variable">-c</span>  <span class="token string">&#39;.[]&#39;</span> <span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># &#39;s/ /%20/g; s/\\([^\\\\]\\)\\\\/\\1 /g&#39;</span>
    <span class="token comment"># for item in $( printf &quot;%s\\n&quot; &quot;\${pageItems}&quot; | tr &#39; &#39; &#39;%20&#39; | sed -e &#39;:a&#39; -e &#39;N&#39; -e &#39;$!ba&#39; -e &#39;s/\\\\\\([^n]\\)/\\1/g&#39; -e &#39;s/\\\\&quot;/&quot;/g&#39; | jq -r -c &#39;.[]&#39; ); do</span>
    <span class="token comment"># for item in $( printf &quot;%s\\n&quot; &quot;\${pageItems}&quot;  | sed -i &#39;s/:\\s\\+&quot;/: &quot;/g&#39; | jq -r -c  &#39;.[]&#39; ); do</span>
    <span class="token comment"># 从当前item中提取dataId、content、fileType</span>
    <span class="token assign-left variable">dataId</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">&quot;%s<span class="token entity" title="\\n">\\n</span>&quot;</span> $item <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">&#39;.dataId&#39;</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">&quot;%s<span class="token entity" title="\\n">\\n</span>&quot;</span> $item <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">&#39;.content&#39;</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">fileType</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">&quot;%s<span class="token entity" title="\\n">\\n</span>&quot;</span> $item <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">&#39;.type&#39;</span><span class="token variable">)</span></span>

    <span class="token comment"># 判断dataId是否为&quot;DBConfig.xml&quot;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${dataId}</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;DBConfig.xml&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token comment"># 写入文件夹A中的DBConfig.xml文件</span>
        <span class="token assign-left variable">folder</span><span class="token operator">=</span><span class="token variable">\${folderA}</span>
        <span class="token assign-left variable">fileName</span><span class="token operator">=</span><span class="token variable">\${dataId}</span>
    <span class="token keyword">else</span>
        <span class="token comment"># 写入文件夹B中的dataId文件</span>
        <span class="token assign-left variable">folder</span><span class="token operator">=</span><span class="token variable">\${folderB}</span>
        <span class="token assign-left variable">fileName</span><span class="token operator">=</span><span class="token variable">\${dataId}</span>
    <span class="token keyword">fi</span>

    <span class="token comment"># 判断文件是否存在，不存在则创建文件</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;<span class="token variable">\${folder}</span>/<span class="token variable">$fileName</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$folder</span>
        <span class="token function">touch</span> <span class="token variable">\${folder}</span>/<span class="token variable">$fileName</span>
    <span class="token keyword">fi</span>

    <span class="token comment"># 写入内容到文件中</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;%s<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$content</span>&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;<span class="token variable">$folder</span>/<span class="token variable">$fileName</span>&quot;</span>

    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${dataId}</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;DBConfig.xml&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable">file_path</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${folderA}</span>/DBConfig.xml&quot;</span>
    <span class="token comment"># 替换第一行</span>
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;.backup&#39;</span> <span class="token string">&#39;1s/.*/&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;/&#39;</span> <span class="token string">&quot;<span class="token variable">\${file_path}</span>&quot;</span>

    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;.backup&#39;</span> <span class="token string">&#39;/name/s/\\(name\\)/ \\1/&#39;</span> <span class="token string">&quot;<span class="token variable">\${file_path}</span>&quot;</span>

    <span class="token comment"># 使用xmllint对文件进行格式化</span>
      xmllint <span class="token parameter variable">--format</span> <span class="token string">&quot;<span class="token variable">\${file_path}</span>&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;<span class="token variable">\${file_path}</span>.tmp&quot;</span>

    <span class="token comment"># # 将格式化后的结果替换原文件</span>
      <span class="token function">mv</span> <span class="token string">&quot;<span class="token variable">\${file_path}</span>.tmp&quot;</span> <span class="token string">&quot;<span class="token variable">\${file_path}</span>&quot;</span>
      <span class="token builtin class-name">echo</span> <span class="token string">&quot;xml文档的处理已完成&quot;</span>
    <span class="token keyword">fi</span>
    <span class="token keyword">done</span>
<span class="token keyword">done</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;完成获取配置,配置文件已同步更新。&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于返回全部为json格式，需要对DBConfig.xml文件单独处理一下。 将该脚本放在catalina.sh文件中 <img src="`+o+'" alt="3996252d6a3a2a3028388628a94d707c.png" loading="lazy"> 控制台输出相关日志 <img src="'+c+'" alt="dc856ad8513e4fc0e1af573d1b383a57.png" loading="lazy"> 同样地，相关配置文件也已获取到 <img src="'+r+`" alt="1354e67f606eb71451b5f80d7ba31579.png" loading="lazy"> 应用也成功部署并且登录成功。</p><h5 id="_3-2-方案二-巧用nacos的下载功能" tabindex="-1"><a class="header-anchor" href="#_3-2-方案二-巧用nacos的下载功能" aria-hidden="true">#</a> 3.2 方案二：巧用nacos的下载功能</h5><p>   方案一虽成功达到目的，但仍存缺陷。    比如拿到的json文件的解析，在xml的解析上，jq并不能精准地解析出来。反而是需要对xml进行单独的处理。在笔者使用nacos的过程中发现nacos提供下载按钮，且下载内容为完整的zip压缩包，因此通过对下载链接的解析及调试，得到如下可行且无需token的下载链接：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http../images//127.0.0.1:8848/nacos/v1/cs/configs?export=true&amp;tenant=&amp;group=local&amp;appName=&amp;dataId=&amp;ids=&amp;username=nacos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>   username非必需，只需要将group带在链接中即可。 因此，只需要通过该链接，将相关内容下载到目标文件夹，再移动到目标文件夹，再部署应用即可。 同样地，先删除相关配置内容: <img src="`+d+`" alt="8985a17e812b557854aec1e547428c93.png" loading="lazy"> 再将如下的脚本，放到catalina.sh文件中，启动时执行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#/bin/bash</span>

<span class="token assign-left variable">folderA</span><span class="token operator">=</span><span class="token string">&quot;/Users/liuzhengdong/project/hrssc/project-svn/CNPC-SSC/ssf-application/ssfServerDev/WEB-INF/CnfgSpace&quot;</span>
<span class="token assign-left variable">folderB</span><span class="token operator">=</span><span class="token string">&quot;/Users/liuzhengdong/project/hrssc/project-svn/CNPC-SSC/ssf-application/ssfServerDev/WEB-INF/classes/Config&quot;</span>


<span class="token assign-left variable">group</span><span class="token operator">=</span><span class="token string">&quot;local&quot;</span>

<span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span>
<span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">&quot;8848&quot;</span>

<span class="token comment"># 下载zip包到本地</span>
<span class="token function">curl</span>  <span class="token parameter variable">-s</span> <span class="token parameter variable">-o</span> <span class="token variable">\${folderB}</span>/data.zip <span class="token string">&quot;http../images//<span class="token variable">\${ip}</span>:<span class="token variable">\${port}</span>/nacos/v1/cs/configs?export=true&amp;tenant=&amp;group=<span class="token variable">\${group}</span>&amp;appName=&amp;dataId=&amp;ids=&amp;username=nacos&quot;</span> <span class="token parameter variable">--output</span> data.zip
<span class="token comment"># wget  http../images//127.0.0.1:8848/nacos/v1/cs/configs?export=true&amp;tenant=&amp;group=local&amp;appName=&amp;dataId=&amp;ids=&amp;username=nacos -O ./data.zip</span>

<span class="token builtin class-name">cd</span> <span class="token variable">\${folderB}</span>
<span class="token comment"># 解压zip包</span>
<span class="token function">unzip</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-q</span> data.zip

<span class="token comment"># 处理local下的DBConfig.xml</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> local/DBConfig.xml <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment"># 将DBConfig.xml移动到A文件夹下</span>
    <span class="token function">mv</span>  <span class="token parameter variable">-f</span> local/DBConfig.xml <span class="token variable">\${folderA}</span>/
<span class="token keyword">else</span>
    <span class="token comment"># 如果不存在，则提示错误信息</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;未获取到数据库配置DBConfig.xml文件&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># # 处理其他文件</span>
<span class="token function">mv</span> <span class="token parameter variable">-f</span>  <span class="token string">&quot;<span class="token variable">\${folderB}</span>/<span class="token variable">\${group}</span>/&quot;</span>*  <span class="token string">&quot;<span class="token variable">\${folderB}</span>/&quot;</span>

<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">local</span>
<span class="token function">rm</span> <span class="token parameter variable">-f</span> data.zip
<span class="token builtin class-name">echo</span> <span class="token string">&quot;系统配置获取已完成&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+'" alt="452238f9ba6f163e1b9ce7e3edfe592f.png" loading="lazy"> 启动应用 <img src="'+u+'" alt="768dcfc45fcbe879f24050c3f3b4e90b.png" loading="lazy"> 配置获取成功且启动成功，该报错恰好说明执行的是刚才圈的V2文件。</p><h3 id="_4-非spring项目与nacos" tabindex="-1"><a class="header-anchor" href="#_4-非spring项目与nacos" aria-hidden="true">#</a> 4.非Spring项目与nacos</h3><p>   其实从实际意义上来说，非Spring应用上nacos有点强行集成的意思。因为nacos本来就是SpringCloud Alibaba解决方案中注册中心和配置中心的最优选，非该框架下的应用何必强行找不痛快呢？    但同样是从实际意义来看，配置中心的使用，却又能在实在意义上使系统开发更规范，配置内容使用更整洁。举个简单的例子，某业务服务范围，很明显这是一个变量，但是系统各个地方都会用到，写死明显不合适，写在代码中互相引用代码耦合性太强，配置中心的优势在此刻即得到展现。</p>',32),k=[b];function g(f,q){return s(),n("div",null,k)}const $=a(m,[["render",g],["__file","非Spring项目如何集成nacos使用.html.vue"]]);export{$ as default};
